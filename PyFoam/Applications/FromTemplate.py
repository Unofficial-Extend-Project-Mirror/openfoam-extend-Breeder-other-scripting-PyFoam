#  ICE Revision: $Id: /local/openfoam/Python/PyFoam/PyFoam/Applications/FromTemplate.py 2123 2007-10-01T13:36:11.873841Z bgschaid  $ 
"""
Application class that implements pyFoamFromTemplate
"""

import sys

from PyFoamApplication import PyFoamApplication

from PyFoam.Basics.TemplateFile import TemplateFile

class FromTemplate(PyFoamApplication):
    def __init__(self,args=None):
        description="""
Generates a file from a template file. Usually the name of the template file
is the name of the file with the extension '.template' (unless specified
otherwise). The file is generated by replacing everything in the template
file that is enclosed by $ $ with calculated expression. values are given in
a Python-dictionary. Lines in the template file that start with $$ are used as
definitons for intermediate expressions
        """
        
        PyFoamApplication.__init__(self,args=args,description=description,usage="%prog [options] <file> <vals>",nr=2,interspersed=True)
        
    def addOptions(self):
        self.parser.add_option("--template-file",
                               action="store",
                               default=None,
                               dest="template",
                               help="Name 0f the template file")
        
        self.parser.add_option("--test",
                               action="store_true",
                               dest="test",
                               default=False,
                               help="Doesn't write to the file, but outputs the result on stdout")
        
    
    def run(self):
        fName=self.parser.getArgs()[0]
        vals=eval(self.parser.getArgs()[1])

        if self.opts.template==None:
            template=fName+".template"
        else:
            template=self.opts.template

        t=TemplateFile(name=template)

        if self.opts.test:
            print t.getString(vals)
        else:
            t.writeToFile(fName,vals)
            
