"""
Application-class that implements pyFoamClearCase.py
"""
from optparse import OptionGroup

from PyFoamApplication import PyFoamApplication

from PyFoam.RunDictionary.SolutionDirectory import SolutionDirectory

class ClearCase(PyFoamApplication):
    def __init__(self,args=None):
        description="""\
Removes all timesteps but the first from a case-directory.  Also
removes other data that is generated by sovers/utilities/PyFoam
"""
        PyFoamApplication.__init__(self,
                                   args=args,
                                   description=description,
                                   usage="%prog <caseDirectory>",
                                   interspersed=True,
                                   changeVersion=False,
                                   nr=1,
                                   exactNr=False)

    def addOptions(self):
        what=OptionGroup(self.parser,
                         "What",
                         "Define what should be cleared")
        self.parser.add_option_group(what)
        
        what.add_option("--after",
                        type="float",
                        dest="after",
                        default=None,
                        help="Only remove timesteps after this time")
        what.add_option("--processors-remove",
                        action="store_true",
                        dest="processor",
                        default=False,
                        help="Remove the processor directories")
        what.add_option("--vtk-keep",
                        action="store_false",
                        dest="vtk",
                        default=True,
                        help="Keep the VTK directory")
        what.add_option("--no-pyfoam",
                        action="store_false",
                        dest="pyfoam",
                        default=True,
                        help="Keep the PyFoam-specific directories and logfiles")
        what.add_option("--keep-last",
                        action="store_true",
                        dest="latest",
                        default=False,
                        help="Keep the data from the last time-step")
        what.add_option("--keep-regular",
                        action="store_true",
                        dest="keepRegular",
                        default=False,
                        help="Keep all the timesteps")

        what.add_option("--clear-history",
                        action="store_true",
                        dest="clearHistory",
                        default=False,
                        help="Clear the PyFoamHistory-file")
        what.add_option("--function-object-data",
                        action="store_true",
                        dest="functionObjectData",
                        default=False,
                        help="Clear the PyFoamHistory-file")

        output=OptionGroup(self.parser,
                         "Output",
                         "What information should be given")
        self.parser.add_option_group(output)
        output.add_option("--fatal",
                          action="store_true",
                          dest="fatal",
                        default=False,
                        help="If non-cases are specified the program should abort")
        output.add_option("--silent",
                          action="store_true",
                          dest="silent",
                          default=False,
                          help="Don't complain about non-case-files")
        output.add_option("--verbose",
                          action="store_true",
                          dest="verbose",
                          default=False,
                          help="Print what cases are cleared")
        
        
    def run(self):
        for cName in self.parser.getArgs():
            if self.checkCase(cName,fatal=self.opts.fatal,verbose=not self.opts.silent):
                self.addLocalConfig(cName)

                if self.opts.verbose:
                    print "Clearing",cName

                sol=SolutionDirectory(cName,archive=None,paraviewLink=False)
                sol.clear(after=self.parser.getOptions().after,
                          processor=self.parser.getOptions().processor,
                          pyfoam=self.parser.getOptions().pyfoam,
                          vtk=self.parser.getOptions().vtk,
                          keepRegular=self.parser.getOptions().keepRegular,
                          keepLast=self.parser.getOptions().latest,
                          clearHistory=self.parser.getOptions().clearHistory,
                          functionObjectData=self.parser.getOptions().functionObjectData)
        
                self.addToCaseLog(cName)
